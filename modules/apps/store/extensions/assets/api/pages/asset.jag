<%
var caramel;

require('/modules/store.js').exec(function (ctx) {
    var asset, aid, title,
            log = ctx.log,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            inDashboard = false,
            utility = require('/modules/util.js');

    caramel = require('caramel');

    log.info('Entered asset detail page');

    matcher.match('/{context}' + configs.assetsUrlPrefix + '/{type}/{aid}');
    aid = matcher.elements().aid;
    title = store.assetLinks(type).title;
    try {
        asset = store.asset(type, aid);
    } catch (e) {
        response.sendError(404, 'Requested page cannot be found');
        return;
    }

    //check asset LC state
    if(configs.lifeCycleBehaviour.visibleIn.indexOf(String(asset.lifecycleState), 0) < 0){
        log.info('Lifecycle State checked failed.');
       // response.sendError(404, 'Requested page cannot be found');
       // return;
    }

    if (store.isuserasset(aid, type)) {
        inDashboard = true;
    }

    var rxtAttributes = utility.getRXTAttributes(tenantId, type);

    var ATTR_PROVIDER='overview_provider';
    var LIFECYCLE_STATE_PROPERTY = 'lcState';
    var DEFAULT_ASSET_VIEW_STATE = 'Published'; //Unless specified otherwise, assets are always visible when Published
    var DEFAULT_LC_ATTRIBUTE_NAME= LIFECYCLE_STATE_PROPERTY;

    /*
     The function obtains the assets published by the given provider
     */
    var getAssetsFromProvider=function(asset,store){

        log.info('Type: '+asset.type);
        var assetsFromProvider={};
        var provider=asset.attributes[ATTR_PROVIDER];
        var searchOptions={};
        var paging;

        searchOptions['attributes']={};
        searchOptions=obtainViewQuery(searchOptions);
        searchOptions['attributes'][ATTR_PROVIDER]=provider;

        paging={start:0, count:10, sort:'recent'};

        assetsFromProvider['overview_provider']=provider;
        assetsFromProvider['type']=type;
        log.info(searchOptions);
        assetsFromProvider['assets']=store.search(searchOptions,paging)[asset.type]||[];

        return assetsFromProvider;
    }

    /*
    The function obtains the query used to search for assets
    */
    var obtainViewQuery = function (options) {

        var storeConfig = require('/config/store.json').lifeCycleBehaviour;
        var visibleStates = storeConfig.visibleIn || DEFAULT_ASSET_VIEW_STATE;
        var attributeName= storeConfig.lcAttributeName || DEFAULT_LC_ATTRIBUTE_NAME;

        //options[LIFECYCLE_STATE_PROPERTY] = visibleStates;
        //Changed the query to check for overview_status as opposed to lifecycle state
        options[attributeName]=visibleStates;

        return options;
    }

    var assetsByProvider=getAssetsFromProvider(asset,store);

    log.info('Assets by Provider: '+stringify(assetsByProvider));

    caramel.render({
        title: 'Store | ' + type,
        user: user,
        sso: sso,

        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),

        navigation: site.navigation(tenantId),
        search: {
            search: {title: type},
            isTopAssets: false,
            searchFields: rxtAttributes
        },
        isSocial: configs.socialCommentsEnable,

        type: type,
        embedURL: configs.server.http + '/gadgets/ifr?url=' + asset.attributes.overview_url,
        inDashboard: inDashboard,
        asset: asset,
        tags: [
            {
                url: '/assets/' + type + '/?page=1&tag=',
                data: store.tags(type)
            }
        ],
        myAssets: { user: user, type: type, title: title },
        recentAssets: store.recentAssets(type) ,
        assetsByProvider:assetsByProvider
    });


}, request, response, session);
%>
